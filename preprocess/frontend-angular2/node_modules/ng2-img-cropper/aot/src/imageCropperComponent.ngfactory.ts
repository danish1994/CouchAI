/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../src/imageCropperComponent';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/query_list';
import * as import10 from '@angular/core/src/linker/view_container';
import * as import11 from '../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import12 from '@angular/core/src/linker/template_ref';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/common/src/directives/ng_if';
export class Wrapper_ImageCropperComponent {
  /*private*/ _eventHandler:Function;
  context:import0.ImageCropperComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  subscription0:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.ImageCropperComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_settings(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.settings = currValue;
      this._expr_0 = currValue;
    }
  }
  check_image(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.image = currValue;
      this._expr_1 = currValue;
    }
  }
  check_cropper(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.cropper = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onCrop.subscribe(_eventHandler.bind(view,'onCrop'))); }
  }
}
var renderType_ImageCropperComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_ImageCropperComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.ImageCropperComponent>;
  _ImageCropperComponent_0_3:Wrapper_ImageCropperComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ImageCropperComponent_Host0,renderType_ImageCropperComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'img-cropper',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_ImageCropperComponent0(this.viewUtils,this,0,this._el_0);
    this._ImageCropperComponent_0_3 = new Wrapper_ImageCropperComponent(this.renderer);
    this.compView_0.create(this._ImageCropperComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._ImageCropperComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ImageCropperComponent) && (0 === requestNodeIndex))) { return this._ImageCropperComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ImageCropperComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._ImageCropperComponent_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._ImageCropperComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const ImageCropperComponentNgFactory:import8.ComponentFactory<import0.ImageCropperComponent> = new import8.ComponentFactory<import0.ImageCropperComponent>('img-cropper',View_ImageCropperComponent_Host0,import0.ImageCropperComponent);
const styles_ImageCropperComponent:any[] = ([] as any[]);
var renderType_ImageCropperComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_ImageCropperComponent,{});
export class View_ImageCropperComponent0 extends import2.AppView<import0.ImageCropperComponent> {
  _viewQuery_cropcanvas_0:import9.QueryList<any>;
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _vc_3:import10.ViewContainer;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import11.Wrapper_NgIf;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _text_7:any;
  _text_8:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ImageCropperComponent0,renderType_ImageCropperComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_cropcanvas_0 = new import9.QueryList<any>();
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'span',new import3.InlineArray2(2,'class','ng2-imgcrop'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n          ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_3 = new import10.ViewContainer(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import12.TemplateRef_(this,3,this._anchor_3);
    this._NgIf_3_6 = new import11.Wrapper_NgIf(this._vc_3.vcRef,this._TemplateRef_3_5);
    this._text_4 = this.renderer.createText(this._el_1,'\n          ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,this._el_1,'canvas',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_6 = this.renderer.createText(this._el_5,'\n          ',(null as any));
    this._text_7 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_8 = this.renderer.createText(parentRenderNode,'\n      ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_5,new import3.InlineArray16(14,'mousedown',(null as any),'mouseup',(null as any),'mousemove',(null as any),'mouseleave',(null as any),'touchmove',(null as any),'touchend',(null as any),'touchstart',(null as any)),this.eventHandler(this.handleEvent_5));
    this._viewQuery_cropcanvas_0.reset([new import13.ElementRef(this._el_5)]);
    this.context.cropcanvas = this._viewQuery_cropcanvas_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._text_7,
      this._text_8
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import14.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_3_0_0:boolean = !this.context.settings.noFileInput;
    this._NgIf_3_6.check_ngIf(currVal_3_0_0,throwOnChange,false);
    this._NgIf_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_3.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 3)) { return new View_ImageCropperComponent1(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
  handleEvent_5(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'mousedown')) {
      const pd_sub_0:any = ((<any>this.context.onMouseDown($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'mouseup')) {
      const pd_sub_1:any = ((<any>this.context.onMouseUp($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'mousemove')) {
      const pd_sub_2:any = ((<any>this.context.onMouseMove($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'mouseleave')) {
      const pd_sub_3:any = ((<any>this.context.onMouseUp($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'touchmove')) {
      const pd_sub_4:any = ((<any>this.context.onTouchMove($event)) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'touchend')) {
      const pd_sub_5:any = ((<any>this.context.onTouchEnd($event)) !== false);
      result = (pd_sub_5 && result);
    }
    if ((eventName == 'touchstart')) {
      const pd_sub_6:any = ((<any>this.context.onTouchStart($event)) !== false);
      result = (pd_sub_6 && result);
    }
    return result;
  }
}
class View_ImageCropperComponent1 extends import2.AppView<any> {
  _el_0:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import10.ViewContainer) {
    super(View_ImageCropperComponent1,renderType_ImageCropperComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'input',new import3.InlineArray2(2,'type','file'),(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'change',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'change')) {
      const pd_sub_0:any = ((<any>this.parentView.context.fileChangeListener($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}