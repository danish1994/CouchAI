import * as import0 from '../../src/imageCropperComponent';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/query_list';
import * as import10 from '@angular/core/src/linker/view_container';
import * as import11 from '../node_modules/@angular/common/src/directives/ng_if.ngfactory';
export declare class Wrapper_ImageCropperComponent {
    _eventHandler: Function;
    context: import0.ImageCropperComponent;
    _changed: boolean;
    _expr_0: any;
    _expr_1: any;
    _expr_2: any;
    subscription0: any;
    constructor(p0: any);
    ngOnDetach(view: import2.AppView<any>, componentView: import2.AppView<any>, el: any): void;
    ngOnDestroy(): void;
    check_settings(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_image(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    check_cropper(currValue: any, throwOnChange: boolean, forceUpdate: boolean): void;
    ngDoCheck(view: import2.AppView<any>, el: any, throwOnChange: boolean): boolean;
    checkHost(view: import2.AppView<any>, componentView: import2.AppView<any>, el: any, throwOnChange: boolean): void;
    handleEvent(eventName: string, $event: any): boolean;
    subscribe(view: import2.AppView<any>, _eventHandler: any, emit0: boolean): void;
}
export declare const ImageCropperComponentNgFactory: import8.ComponentFactory<import0.ImageCropperComponent>;
export declare class View_ImageCropperComponent0 extends import2.AppView<import0.ImageCropperComponent> {
    _viewQuery_cropcanvas_0: import9.QueryList<any>;
    _text_0: any;
    _el_1: any;
    _text_2: any;
    _anchor_3: any;
    _vc_3: import10.ViewContainer;
    _TemplateRef_3_5: any;
    _NgIf_3_6: import11.Wrapper_NgIf;
    _text_4: any;
    _el_5: any;
    _text_6: any;
    _text_7: any;
    _text_8: any;
    constructor(viewUtils: import3.ViewUtils, parentView: import2.AppView<any>, parentIndex: number, parentElement: any);
    createInternal(rootSelector: string): import8.ComponentRef<any>;
    injectorGetInternal(token: any, requestNodeIndex: number, notFoundResult: any): any;
    detectChangesInternal(throwOnChange: boolean): void;
    destroyInternal(): void;
    createEmbeddedViewInternal(nodeIndex: number): import2.AppView<any>;
    handleEvent_5(eventName: string, $event: any): boolean;
}
