"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require("../../src/imageCropperComponent");
var import1 = require("@angular/core/src/change_detection/change_detection_util");
var import2 = require("@angular/core/src/linker/view");
var import3 = require("@angular/core/src/linker/view_utils");
var import5 = require("@angular/core/src/metadata/view");
var import6 = require("@angular/core/src/linker/view_type");
var import7 = require("@angular/core/src/change_detection/constants");
var import8 = require("@angular/core/src/linker/component_factory");
var import9 = require("@angular/core/src/linker/query_list");
var import10 = require("@angular/core/src/linker/view_container");
var import11 = require("../node_modules/@angular/common/src/directives/ng_if.ngfactory");
var import12 = require("@angular/core/src/linker/template_ref");
var import13 = require("@angular/core/src/linker/element_ref");
var import14 = require("@angular/common/src/directives/ng_if");
var Wrapper_ImageCropperComponent = (function () {
    function Wrapper_ImageCropperComponent(p0) {
        this._changed = false;
        this.context = new import0.ImageCropperComponent(p0);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    Wrapper_ImageCropperComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_ImageCropperComponent.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_ImageCropperComponent.prototype.check_settings = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.settings = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_ImageCropperComponent.prototype.check_image = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.image = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_ImageCropperComponent.prototype.check_cropper = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.cropper = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_ImageCropperComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_ImageCropperComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_ImageCropperComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_ImageCropperComponent.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.onCrop.subscribe(_eventHandler.bind(view, 'onCrop')));
        }
    };
    return Wrapper_ImageCropperComponent;
}());
exports.Wrapper_ImageCropperComponent = Wrapper_ImageCropperComponent;
var renderType_ImageCropperComponent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_ImageCropperComponent_Host0 = (function (_super) {
    __extends(View_ImageCropperComponent_Host0, _super);
    function View_ImageCropperComponent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        return _super.call(this, View_ImageCropperComponent_Host0, renderType_ImageCropperComponent_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways) || this;
    }
    View_ImageCropperComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'img-cropper', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_ImageCropperComponent0(this.viewUtils, this, 0, this._el_0);
        this._ImageCropperComponent_0_3 = new Wrapper_ImageCropperComponent(this.renderer);
        this.compView_0.create(this._ImageCropperComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import8.ComponentRef_(0, this, this._el_0, this._ImageCropperComponent_0_3.context);
    };
    View_ImageCropperComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.ImageCropperComponent) && (0 === requestNodeIndex))) {
            return this._ImageCropperComponent_0_3.context;
        }
        return notFoundResult;
    };
    View_ImageCropperComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._ImageCropperComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._ImageCropperComponent_0_3.context.ngAfterViewInit();
            }
        }
    };
    View_ImageCropperComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._ImageCropperComponent_0_3.ngOnDestroy();
    };
    View_ImageCropperComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_ImageCropperComponent_Host0;
}(import2.AppView));
exports.ImageCropperComponentNgFactory = new import8.ComponentFactory('img-cropper', View_ImageCropperComponent_Host0, import0.ImageCropperComponent);
var styles_ImageCropperComponent = [];
var renderType_ImageCropperComponent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_ImageCropperComponent, {});
var View_ImageCropperComponent0 = (function (_super) {
    __extends(View_ImageCropperComponent0, _super);
    function View_ImageCropperComponent0(viewUtils, parentView, parentIndex, parentElement) {
        return _super.call(this, View_ImageCropperComponent0, renderType_ImageCropperComponent, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways) || this;
    }
    View_ImageCropperComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._viewQuery_cropcanvas_0 = new import9.QueryList();
        this._text_0 = this.renderer.createText(parentRenderNode, '\n        ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'span', new import3.InlineArray2(2, 'class', 'ng2-imgcrop'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n          ', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1, null);
        this._vc_3 = new import10.ViewContainer(3, 1, this, this._anchor_3);
        this._TemplateRef_3_5 = new import12.TemplateRef_(this, 3, this._anchor_3);
        this._NgIf_3_6 = new import11.Wrapper_NgIf(this._vc_3.vcRef, this._TemplateRef_3_5);
        this._text_4 = this.renderer.createText(this._el_1, '\n          ', null);
        this._el_5 = import3.createRenderElement(this.renderer, this._el_1, 'canvas', import3.EMPTY_INLINE_ARRAY, null);
        this._text_6 = this.renderer.createText(this._el_5, '\n          ', null);
        this._text_7 = this.renderer.createText(this._el_1, '\n        ', null);
        this._text_8 = this.renderer.createText(parentRenderNode, '\n      ', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_5, new import3.InlineArray16(14, 'mousedown', null, 'mouseup', null, 'mousemove', null, 'mouseleave', null, 'touchmove', null, 'touchend', null, 'touchstart', null), this.eventHandler(this.handleEvent_5));
        this._viewQuery_cropcanvas_0.reset([new import13.ElementRef(this._el_5)]);
        this.context.cropcanvas = this._viewQuery_cropcanvas_0.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._anchor_3,
            this._text_4,
            this._el_5,
            this._text_6,
            this._text_7,
            this._text_8
        ]), [disposable_0]);
        return null;
    };
    View_ImageCropperComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import14.NgIf) && (3 === requestNodeIndex))) {
            return this._NgIf_3_6.context;
        }
        return notFoundResult;
    };
    View_ImageCropperComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_3_0_0 = !this.context.settings.noFileInput;
        this._NgIf_3_6.check_ngIf(currVal_3_0_0, throwOnChange, false);
        this._NgIf_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        this._vc_3.detectChangesInNestedViews(throwOnChange);
    };
    View_ImageCropperComponent0.prototype.destroyInternal = function () {
        this._vc_3.destroyNestedViews();
    };
    View_ImageCropperComponent0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 3)) {
            return new View_ImageCropperComponent1(this.viewUtils, this, 3, this._anchor_3, this._vc_3);
        }
        return null;
    };
    View_ImageCropperComponent0.prototype.handleEvent_5 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'mousedown')) {
            var pd_sub_0 = (this.context.onMouseDown($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'mouseup')) {
            var pd_sub_1 = (this.context.onMouseUp($event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'mousemove')) {
            var pd_sub_2 = (this.context.onMouseMove($event) !== false);
            result = (pd_sub_2 && result);
        }
        if ((eventName == 'mouseleave')) {
            var pd_sub_3 = (this.context.onMouseUp($event) !== false);
            result = (pd_sub_3 && result);
        }
        if ((eventName == 'touchmove')) {
            var pd_sub_4 = (this.context.onTouchMove($event) !== false);
            result = (pd_sub_4 && result);
        }
        if ((eventName == 'touchend')) {
            var pd_sub_5 = (this.context.onTouchEnd($event) !== false);
            result = (pd_sub_5 && result);
        }
        if ((eventName == 'touchstart')) {
            var pd_sub_6 = (this.context.onTouchStart($event) !== false);
            result = (pd_sub_6 && result);
        }
        return result;
    };
    return View_ImageCropperComponent0;
}(import2.AppView));
exports.View_ImageCropperComponent0 = View_ImageCropperComponent0;
var View_ImageCropperComponent1 = (function (_super) {
    __extends(View_ImageCropperComponent1, _super);
    function View_ImageCropperComponent1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        return _super.call(this, View_ImageCropperComponent1, renderType_ImageCropperComponent, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways, declaredViewContainer) || this;
    }
    View_ImageCropperComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'input', new import3.InlineArray2(2, 'type', 'file'), null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray2(2, 'change', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return null;
    };
    View_ImageCropperComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_ImageCropperComponent1.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'change')) {
            var pd_sub_0 = (this.parentView.context.fileChangeListener($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_ImageCropperComponent1;
}(import2.AppView));
//# sourceMappingURL=imageCropperComponent.ngfactory.js.map